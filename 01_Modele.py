import streamlit as st
import pandas as pd
from typing import List, Union
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import joblib
import matplotlib.pyplot as plt

# Dans le requirements.txt,
# ne pas installer de modules standards √† Python

# Ex√©cuter localement
# streamlit run 01_Modele.py

##################################################
# Configurer la page
# wide, centered
# auto or expanded
st.set_page_config(page_title="Mod√®les de classification",
                   page_icon="img/favicon.ico",
                   layout="wide",
                   initial_sidebar_state="auto",
                   menu_items={
                       "About": "Mod√®les de classification avec for√™ts al√©atoires (*Random Forests*)."}
)
    
# Cacher le menu officiel (hamburger)
hide_menu_style = """
        <style>
        #MainMenu {visibility: hidden;}
        </style>
        """
# ???
#st.markdown(hide_menu_style, unsafe_allow_html=True)

##################################################
# Entrer les donn√©es pour les mod√®les
# Construire l'interface du bandeau gauche
with st.sidebar:
    
    st.title("M√©triques")
    
    st.caption("Les m√©triques sont born√©es aux valeurs (cat√©gories ou minimum et maximum) des features du jeu de donn√©es utilis√© pour entrainer le mod√®le.")
    
    Gender_n = st.radio(":orange[Genre]:", ["f", "m"], horizontal=True)
    
    Age = st.slider(":orange[√Çge]:", min_value=14, max_value=61, value=23)
    
    Height = st.slider(":orange[Taille] (en cm) - Utiliser le tableau de conversion plus bas:", min_value=145, max_value=195, value=170)
    st.caption("Ajuster la taille de la fen√™tre.")
    st.caption("Ajuster la disposition de la liste en tirant ce bandeau vers la droite üëâ")
    equivalent = """
    | pi-po | cm | pi-po | cm | pi-po | cm |
    |:--|:--|:--|:--|:--|:--|
    |4' 9"|145|5' 4"|163| 5' 11"|180|
    |4' 10"|147| 5' 5"|165|	6' 0"|183|
    |4' 11"|150| 5' 6"|168|	6' 1"|185|
    |5' 0"|152| 5' 7"|170| 6' 2"|188|
    |5' 1"|155|	5' 8"|173| 6' 3"|191|
    |5' 2"|157|	5' 9"|175| 6' 4"|193|
    |5' 3"|160|	5' 10"|178| 6' 5"|196|
    """
    st.caption(equivalent)
    st.caption("")
    
    FHWO_n = st.radio(":orange[Ob√©sit√© dans la famille (pr√©sente ou pass√©e)]:", ["non", "oui"], horizontal=True)
    
    FAVC_n = st.radio("Consommation d'aliments hypercaloriques:", ["non", "oui"], horizontal=True)
    
    FCVC_n = st.radio(":orange[Consommation de l√©gumes avec les repas]:", ["jamais", "parfois", "souvent"], index=1, horizontal=True)

    NCP_n = st.radio(":orange[Nombre de repas quotidien]:", ["1", "2", "3", "4 et plus"], index=2, horizontal=True)


    CAEC_n = st.radio(":orange[Collations entre les repas]:", ["jamais", "parfois", "fr√©quemment", "toujours"], index=1, horizontal=True)
    st.caption("Ajuster la taille de la fen√™tre.")
    st.caption("Ajuster la disposition de la liste en tirant ce bandeau vers la droite üëâ")
    
    SMOKE_n = st.radio("Tabagisme:", ["non", "oui"], horizontal=True)
    
    CH2O_n = st.radio("Consommation quotidienne d'eau (en litre):", ["moins de 1", "1 √† 2", "plus de 2"], horizontal=True)
    
    SCC_n = st.radio("Surveillance de sa consommation calorique:", ["non", "oui"], horizontal=True)
    
    FAF_n = st.radio("Activit√© physique hebdomadaire (en jour):", ["jamais", "1 √† 2", "2 √† 4", "4 √† 5"], index=1, horizontal=True)

    TUE_n = st.radio("Temps quotidien d'utilisation d'appareils (en heure):", ["0 √† 2", "3 √† 5", "plus de 5"], index=1, horizontal=True)
    st.caption("Appareils mobiles, jeux vid√©o, TV, ordinateurs, etc.")
    
    CALC_n = st.radio("Consommation d'alcool (avec ou sans repas):", ["jamais", "parfois", "fr√©quemment", "souvent"], index=1, horizontal=True)
    st.caption("Ajuster la taille de la fen√™tre.")
    st.caption("Ajuster la disposition de la liste en tirant ce bandeau vers la droite üëâ")

    Transport = st.radio("Transport le plus utilis√©:", ["automobile", "motocyclette", "v√©lo", "en commun", "marche"], horizontal=True)

##################################################
# Traiter les donn√©es pour les mod√®les

# Gender_n
# R√©assigner
Gender_n = 0 if Gender_n == 'f' else 1
#st.write(Gender_n, type(Gender_n))

# Age
# R√©assigner
Age = int(Age)
#st.write(Age, type(Age))

# Height
# R√©assigner
Height = float(Height / 100)
#st.write(Height, type(Height))

# FHWO_n
# R√©assigner
FHWO_n = 0 if FHWO_n == 'non' else 1
#st.write(FHWO_n, type(FHWO_n))

# FAVC_n
# R√©assigner
FAVC_n = 0 if FAVC_n == 'non' else 1
#st.write(FAVC_n, type(FAVC_n))

# FCVC_n
# R√©assigner
if FCVC_n == "jamais":
    FCVC_n = 0
elif FCVC_n == "parfois":
    FCVC_n = 1
elif FCVC_n == "souvent":
    FCVC_n = 2
#st.write(FCVC_n, type(FCVC_n))

# NCP_n
# R√©assigner
if NCP_n == "1":
    NCP_n = 1
elif NCP_n == "2":
    NCP_n = 2
elif NCP_n == "3":
    NCP_n = 3
elif NCP_n == "4 et plus":
    NCP_n = 4
#st.write(NCP_n, type(NCP_n))

# CAEC_n
# R√©assigner
if CAEC_n == "jamais":
    CAEC_n = 0
elif CAEC_n == "parfois":
    CAEC_n = 1
elif CAEC_n == "fr√©quemment":
    CAEC_n = 2
elif CAEC_n == "toujours":
    CAEC_n = 3
#st.write(CAEC_n, type(CAEC_n))

# SMOKE_n
# R√©assigner
SMOKE_n = 0 if SMOKE_n == 'non' else 1
#st.write(SMOKE_n, type(SMOKE_n))

# CH2O_n
# R√©assigner
if CH2O_n == "moins de 1":
    CH2O_n = 1
elif CH2O_n == "1 √† 2":
    CH2O_n = 2
elif CH2O_n == "plus de 2":
    CH2O_n = 3
#st.write(CH2O_n,type(CH2O_n))

# SCC_n
# R√©assigner
SCC_n = 0 if SCC_n == 'non' else 1
#st.write(SCC_n, type(SCC_n))

# FAF_n
# R√©assigner
if FAF_n == "jamais":
    FAF_n = 0
elif FAF_n == "1 √† 2":
    FAF_n = 1
elif FAF_n == "2 √† 4":
    FAF_n = 2
elif FAF_n == "4 √† 5":
    FAF_n = 3
#st.write(FAF_n, type(FAF_n))

# TUE_n
# R√©assigner
if TUE_n == "0 √† 2":
    TUE_n = 1
elif TUE_n == "3 √† 5":
    TUE_n = 2
elif TUE_n == "plus de 5":
    TUE_n = 3
#st.write(TUE_n, type(TUE_n))

# CALC_n
# R√©assigner
if CALC_n == "jamais":
    CALC_n = 0
elif CALC_n == "parfois":
    CALC_n = 1
elif CALC_n == "fr√©quemment":
    CALC_n = 2
elif CALC_n == "souvent":
    CALC_n = 3
#st.write(CALC_n, type(CALC_n))

# Transport
# convertit en
# Automobile_n, Motorbike_n, Bike_n
# Public_Transportation_n, Walking_n
# R√©assigner
if Transport == "automobile":
    Automobile_n = 1
    Motorbike_n = 0
    Bike_n = 0
    Public_Transportation_n = 0
    Walking_n = 0
elif Transport == "motocyclette":
    Automobile_n = 0
    Motorbike_n = 1
    Bike_n = 0
    Public_Transportation_n = 0
    Walking_n = 0
elif Transport == "v√©lo":
    Automobile_n = 0
    Motorbike_n = 0
    Bike_n = 1
    Public_Transportation_n = 0
    Walking_n = 0
elif Transport == "en commun":
    Automobile_n = 0
    Motorbike_n = 0
    Bike_n = 0
    Public_Transportation_n = 1
    Walking_n = 0
elif Transport == "marche":
    Automobile_n = 0
    Motorbike_n = 0
    Bike_n = 0
    Public_Transportation_n = 0
    Walking_n = 1
# !!!Valider
#st.write(Automobile_n, type(Automobile_n))
#st.write(Motorbike_n, type(Motorbike_n))
#st.write(Bike_n, type(Bike_n))
#st.write(Public_Transportation_n, type(Public_Transportation_n))
#st.write(Walking_n, type(Walking_n))

# Nobeyesdad_n et
# Nobeyesdad_n2
Nobeyesdad_n = 1
Nobeyesdad_n2 = 1

# Construire des listes
keys = ["Gender_n", "Age", "Height", "FHWO_n", "FAVC_n", "FCVC_n", "NCP_n", "CAEC_n", "SMOKE_n", "CH2O_n", "SCC_n", "FAF_n", "TUE_n", "CALC_n", "Automobile_n", "Motorbike_n", "Bike_n", "Public_Transportation_n", "Walking_n", "Nobeyesdad_n", "Nobeyesdad_n2"]
values = [Gender_n, Age, Height, FHWO_n, FAVC_n, FCVC_n, NCP_n, CAEC_n, SMOKE_n, CH2O_n, SCC_n, FAF_n, TUE_n, CALC_n, Automobile_n, Motorbike_n, Bike_n, Public_Transportation_n, Walking_n, Nobeyesdad_n, Nobeyesdad_n2]

# Convertir les listes en DataFrame
metriques = pd.DataFrame([values], columns=keys)
# !!!Valider
#st.write(metriques)

##################################################
# Construire l'interface de la page
# 1ere partie
st.title ("Mod√®les de classification")

st.subheader("Instructions")

st.markdown("Changer les m√©triques dans le bandeau de gauche.")
st.caption("Les m√©triques :orange[color√©es] ont le plus d'influence sur les pr√©visions.")

##################################################
# Pr√©parer et faire les calculs
class rf_classification:
    """Classe pour cr√©er une instance de donn√©es par d√©faut
    et de mod√®le pr√©dictif (l'algorithme de Random Forest); la classe
    permet d'importer de nouvelles de donn√©es, de les changer
    dans l'attribut d'instance et d'ex√©cuter le mod√®le pr√©dictif."""
    
    def __init__(self) -> Union[pd.DataFrame, RandomForestClassifier]:
        """Instantier des donn√©es de d√©part ou par d√©faut
        et un mod√®le pr√©dictif(l'algorithme de Random Forest)"""

        # Constantes pour cr√©er un DataFrame de donn√©es
        COLS: List[str] = ['Gender_n', 'Age', 'Height', 'FHWO_n', 'FAVC_n',
                           'FCVC_n', 'NCP_n', 'CAEC_n', 'SMOKE_n', 'CH2O_n',
                           'SCC_n', 'FAF_n', 'TUE_n', 'CALC_n',
                           'Automobile_n', 'Motorbike_n', 'Bike_n',
                           'Public_Transportation_n', 'Walking_n',
                           'Nobeyesdad_n', 'Nobeyesdad_n2']
        VALS: List[int, float] = [0, 20, 1.75, 0, 0,
                                  1, 3, 1, 0, 1,
                                  0, 1, 3, 1,
                                  0, 0, 0,
                                  4, 0,
                                  1, 1]

        # Attribut de d√©part ou par d√©faut
        self.questionnaire: pd.DataFrame\
            = pd.DataFrame(np.array([VALS]), columns=COLS)
        # Attributs
        self.modele_1_prediction: RandomForestClassifier\
            = joblib.load('modele/modele_1_rf.pkl')
        self.modele_2_prediction: RandomForestClassifier\
            = joblib.load('modele/modele_2_rf.pkl')
    

    def importer_changer_donnees(self,
                                 nom_fichier_ext: str,
                                 nom_feuille: str) -> pd.DataFrame:
        """Importer de nouvelles donn√©es et
        changer les donn√©es avec les nouvelles pour le mod√®le pr√©dictif"""
        
        #!!!
        self.donnees: pd.DataFrame = pd.read_excel(nom_fichier_ext,
                                                   sheet_name=nom_feuille,
                                                   skiprows=24,
                                                   decimal=',')
        self.questionnaire: pd.DataFrame = self.donnees
        return self.questionnaire
    

    # 1er mod√®le
    def faire_classification_1(self) -> str:
        """Faire une classification (0 ou 1) avec le mod√®le pr√©dictif 1
        et les donn√©es dans les attributs de l'instance"""
        
        donnees: pd.DataFrame = self.questionnaire
        donnees2: pd.DataFrame =\
            donnees.rename(columns={'Nobeyesdad_n': 'NObeyesdad_n',
                                    'Nobeyesdad_n2': 'NObeyesdad_n2'})
        donnees3: pd.DataFrame =\
            donnees2.drop(labels=['NObeyesdad_n', 'NObeyesdad_n2'], axis=1)
    
        self.resultat: RandomForestClassifier =\
            self.modele_1_prediction.predict(donnees3)
        if int(self.resultat) == 0:
            return "non ob√®se"
        else:
            return "ob√®se"


    # 2e mod√®le
    def faire_classification_2(self) -> str:
        """Faire une classification (1,2,3,4,5,6,7) avec le mod√®le pr√©dictif 2
        et les donn√©es dans les attributs de l'instance"""
        
        donnees: pd.DataFrame = self.questionnaire
        donnees2: pd.DataFrame =\
            donnees.rename(columns={'Nobeyesdad_n': 'NObeyesdad_n',
                                    'Nobeyesdad_n2': 'NObeyesdad_n2'})
        donnees3: pd.DataFrame =\
            donnees2.drop(labels=['NObeyesdad_n', 'NObeyesdad_n2'], axis=1)
    
        self.resultat: RandomForestClassifier =\
            self.modele_2_prediction.predict(donnees3)
        if int(self.resultat) == 1:
            return "poids insuffisant"
        elif int(self.resultat) == 2:
            return "poids normal"
        elif int(self.resultat) == 3:
            return "surpoids de niveau I"
        elif int(self.resultat) == 4:
            return "surpoids de niveau II"
        elif int(self.resultat) == 5:
            return "ob√©sit√© de type I"
        elif int(self.resultat) == 6:
            return "ob√©sit√© type de II"
        elif int(self.resultat) == 7:
            return "ob√©sit√© type de III"


# Instantier
jeu: rf_classification = rf_classification()

# !!!Valider
#st.write("Donn√©es par d√©faut")
#st.write(jeu.questionnaire)
#st.write("Mod√®les")
#st.write(jeu.modele_1_prediction)
#st.write(jeu.modele_2_prediction)

# Entrer le m√©trique du bandeau de gauche
jeu.questionnaire = metriques

# !!!Valider
#st.write("Nouvelles donn√©es")
#st.write(jeu.questionnaire)

# !!!Valider
#st.write("Pr√©vision")
#st.write(jeu.faire_classification_1())
#st.write(jeu.faire_classification_2())

##################################################
st.subheader("R√©sultats")

st.markdown("Comparer les m√©triques et les r√©sultats sur une √©chelle √©gale")
st.caption("Les cat√©gories des m√©triques qualitatifs sont toutes converties en nombres. Les m√©triques binaires deviennent 0 ou 1. Les autres m√©triques vont de 1 √† 3, √† 4 ou √† 7. Tous les m√©triques ont √©t√© standardis√©s avec une √©chelle de 0 √† 1. Viennent s'ajouter les r√©sultats binomial et multinomial.")

metriques_2 = metriques.copy()
#
metriques_2.rename(columns={"Nobeyesdad_n": "Rien",
                            "Nobeyesdad_n2": "Binomial"}, inplace=True)
#
metriques_2["Multinomial"] = metriques_2["Binomial"]
#
metriques_liste = ["Genre", "√Çge", "Taille", "Ob√©sit√©", "Hypercalorique", "L√©gumes", "Repas", "Collations", "Tabagisme", "Eau", "Surveillance", "Activit√©", "Appareils", "Alcool", "Automobile", "Motocyclette", "V√©lo", "En commun", "Marche", "", "Binomial", "Multinomial"]
#
df = pd.DataFrame({'M√©trique': metriques_liste,
                   'Valeur': list(metriques_2.loc[0]),
                   'Valeur_max': [1, 61, 1.95, 1, 1, 2, 4, 3, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 7],
                   'Soustracteur': [0, 14, 1.45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                   'Diviseur': [0.25, 11.75, 0.125, 0.25, 0.25, 0.5, 1, 0.75, 0.25, 0.75, 0.25, 0.75, 0.75, 0.75, 0.25, 0.25, 0.25, 0.25, 0.25, 1, 0.25, 7/4]})
#
df['Valeur_aj'] = (df['Valeur'] - df['Soustracteur']) / df['Diviseur']
#
df['Valeur_max_aj'] = (df['Valeur_max'] - df['Soustracteur']) / df['Diviseur']
#df

#
fig, ax = plt.subplots(figsize=(10,1))

plt.bar([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22], df['Valeur_max_aj'], color="dodgerblue", alpha=0.15)
plt.bar([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22], df['Valeur_aj'], color='orangered')
plt.xticks([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22], df['M√©trique'], rotation=70)
plt.yticks([1,2,3,4])
plt.gca().axes.get_yaxis().set_visible(False)

st.pyplot(fig)

##################################################
# Construire l'interface de la page
# 2e partie
col1, col2 = st.columns(2)

with col1:
    st.markdown(f"**Mod√®le (1) binomial**<br> :orange[{jeu.faire_classification_1()}]", unsafe_allow_html=True)
    st.caption("Classifications possibles:<br> &nbsp;&nbsp;0: non ob√®se<br> &nbsp;&nbsp;1: ob√®se", unsafe_allow_html=True)
    #st.image("img/random-forests.png", width=225)


with col2:
    st.markdown(f"**Mod√®le (2) multinomial**<br> :orange[{jeu.faire_classification_2()}]", unsafe_allow_html=True)
    st.caption("Classifications possibles:<br> &nbsp;&nbsp;1: poids insuffisant<br> &nbsp;&nbsp;2: poids normal<br> &nbsp;&nbsp;3: surpoids de niveau I<br> &nbsp;&nbsp;4: surpoids de niveau II<br> &nbsp;&nbsp;5: ob√©sit√© de type I<br> &nbsp;&nbsp;6: ob√©sit√© type de II<br> &nbsp;&nbsp;7: ob√©sit√© type de III<br> Une classification bas√©e sur<br> l'Indice de Masse Corporelle<br> (IMC = Poids/Taille<sup>2</sup>)", unsafe_allow_html=True)

st.subheader("Description")

st.markdown("Les 2 mod√®les de for√™ts al√©atoires (*Random Forests*) permettent de pr√©dire la cat√©gorie de poids (actuelle ou future) √† partir des m√©triques de son hygi√®ne de vie.<br><br> Il faut d'abord entrainer les mod√®les avec les donn√©es d'individus dont on connait la cat√©gorie de l'Indice de Masse Corporelle (IMC) ou une agr√©gation de ces cat√©gories (ob√®se, non ob√®se) et 19 *features*: les 19 m√™mes m√©triques que ceux dans le bandeau de gauche (chaque moyen de transport compte pour 1).<br><br> Chaque mod√®le est un ensemble de n estimateurs. Un estimateur est un arbre de d√©cision. Cet arbre permet de trouver un r√©sultat √† partir des donn√©es qui lui sont fournies. Les donn√©es entrent par le cime de l'arbre et cheminent dans les embranchements vers un noeud final: un r√©sultat.", unsafe_allow_html=True)

col1, col2 = st.columns(2)

with col1:
    st.image("img/arbre_a.png", caption="D√©but d'un arbre (d'un estimateur)", use_column_width=True)

with col2:
    st.image("img/arbre_b.png", caption="Arbre (estimateur) complet", use_column_width=True)

st.markdown("Chaque mod√®le compte n estimateurs ou n arbres. Lors d'un pr√©vision, chaque estimateur trouve un r√©sultat. Ensuite, parmi les n r√©sultats obtenus, le r√©sultat majoritaire l'emporte et devient le r√©sultat du mod√®le. Si le mod√®le est binomial, il n'y a que 2 classifications possibles. Par exemple, dans un mod√®le avec 100 estimateurs, il y a 100 r√©sultats; 85 pourraient aller √† la classification 1 et 15 √† la classification 2. La classification 1 l'emporte et le mod√®le retourne ce r√©sultat. Avec un mod√®le multinomial √† 7 cat√©gories, il peut y avoir jusqu'√† 7 classifications possibles. Le vote tranche entre un maximum de 7 r√©sultats et le mod√®le retourne ce r√©sultat.<br><br> Enfin, les 2 mod√®les sont sauvegard√©s en format Pickle (format binaire). Ce sont des matrices qui permettent de transformer des donn√©es √† l'entr√©e en r√©sultat √† la sortie. En langage Python, ce sont des objets, bien qu'opaques. <br><br>Mod√®le (1) binomial avec 135 estimateurs:", unsafe_allow_html=True)

st.write(jeu.modele_1_prediction)
st.markdown("<br>Mod√®le (2) multinomial avec 400 estimateurs:", unsafe_allow_html=True)
st.write(jeu.modele_2_prediction)

st.markdown("<br>Les mod√®les peuvent √™tre import√©s. On peut leur attribuer de nouvelles donn√©es pour obtenir des pr√©visions.", unsafe_allow_html=True)

st.subheader("Quelques b√©mols...")

st.markdown("Avec un jeu de donn√©es modeste de 2111 observations (1688 pour l'entrainement et 423 pour les tests), les 2 mod√®les sont √† prendre avec un grain de sel. L'objectif principal est de concr√©tiser un projet d'analyses des donn√©es et de *Machine Learning*, puis de le rendre op√©rationnel avec ce site web interactif.<br><br> Le Mod√®le (1) binomial donne un score de justesse de 94.3%. C'est un bon score; presque statistiquement significatif √† 95%. Ce qui donne un r√©sultat fiable 19 fois sur 20. Le Mod√®le (2) multinomial donne un score de justesse de 84.2%. Les scores sont calcul√©s √† partir des matrices de confusion sur le jeu de donn√©es de test de 423 observations, ci-dessous.", unsafe_allow_html=True)

col1, col2 = st.columns(2)

with col1:
    st.image("img/matrice1.png", caption="Matrice de confusion 1", use_column_width=True)

with col2:
    st.image("img/matrice2.png", caption="Matrice de confusion 2", use_column_width=True)

st.markdown("Les 2 mod√®les souffrent de sous-apprentissage avec un manque de donn√©es pour les entrainer. Il serait bon de doubler la quantit√© d'observations sans risquer le sur-apprentissage, car les for√™ts al√©atoires ne sont pas suj√®tent √† ce genre de probl√®me. De plus, comme les mod√®les ont √©t√© entrain√©s avec une m√©trique √Çge dont la moyenne-m√©diane est de 24.3-22.8 avec un 1er quartile √† 20 et un 3e quartile √† 26, la surrepr√©sentation des vingtenaires dans l'entrainement biaise les pr√©visions avec d'autres groupes d'√¢ge. D'autant plus que dans les 2 mod√®les, l'√¢ge demeure le facteur explicatif (*feature*) pr√©pond√©rant.<br><br> Les 5 premiers facteurs d'impact (en ordre) du Mod√®le 1: :orange[√Çge], :orange[Taille], :orange[Ob√©sit√© dans la famille (pr√©sente ou pass√©e)], :orange[Nombre de repas quotidien] et :orange[Collations entre les repas]. Les 5 premiers facteurs d'impact (en ordre) du Mod√®le 2: :orange[√Çge], :orange[Taille], :orange[Ob√©sit√© dans la famille (pr√©sente ou pass√©e)], :orange[Genre] et :orange[Consommation de l√©gumes avec les repas]. En d'autres mots, ce sont les m√©triques qui ont le plus d'influence sur les pr√©visions.", unsafe_allow_html=True)

col1, col2 = st.columns(2)

with col1:
    st.image("img/modele1.png", caption="Modele 1 - % d'influence (sur 100%)", use_column_width=True)

with col2:
    st.image("img/modele2.png", caption="Modele 2 - % d'influence (sur 100%)", use_column_width=True)

st.markdown("Plus d'observations et plus de repr√©sentativit√© de tous les groupes d'√¢ge donnerait des mod√®les plus fiables.", unsafe_allow_html=True)
